// set up a soft sweep simulation
// recapitate later and add neutral mutations
initialize()
{
	// some constants
	defineConstant("chrSz", 30000000); // chromosome size in bp
	defineConstant("simID", getSeed()); // save this run's identifier, used to save
	defineConstant("popSz", 50); // population size
	defineConstant("initFreqmin", 0.1); // minimum initial frequency of the beneficial mutation
	defineConstant("n1", 22); // initial sample size (# diploid individuals)
	defineConstant("n2", 22); // second sample size
	
	// prep to output tree format for recapitation
	initializeTreeSeq();

	// set the overall neutral mutation rate
	initializeMutationRate(0);
	
	// mutations: name, dominance, ?, selection coefficient
	initializeMutationType("m1", 0.5, "f", 0);	// m1 mutation type: selected
	         
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length chrSz
	initializeGenomicElement(g1, 0, chrSz - 1);
	
	// uniform recombination along the chromosome
	initializeRecombinationRate(1e-8);
}

// create a population
1 late()
{
	sim.addSubpop("p1", popSz);
	p1.genomes.readFromVCF("tmp/test.vcf", m1);
}

// slight WF burnin for 100 generations, then sweep from standing variation
// pick a mutation to sweep from
100 late()
{
	muts = sim.mutations;
	muts = muts[sim.mutationFrequencies(p1, muts) > initFreqmin &
		muts.position > (chrSz*7/16) & muts.position < (chrSz*9/16)]; // only pick mutations of min frequency near the middle of the chromosome

	if (size(muts)) // if some mutations exist
	{
		mut = sample(muts, 1); // pick one from the suitable mutations
		mut.setSelectionCoeff(0.5); // set selection coefficient
		print("Position: " + mut.position); // print the position in the genome
		defineConstant("mutID", mut.id); // save the mutation ID for the one under selection
	}
	else
	{
		cat("No contender of sufficient frequency found.\n");
	}

	// output state here
	print(sim.mutationFrequencies(p1, muts[muts.id == mutID])); // print the frequency
   sampledIndividuals = sample(p1.individuals, 22);
	sampledIndividuals.genomes.outputVCF("tmp/slim_sw_" + simID + "_1.vcf"); // to output to file
}


110 late() {
	//check the selected allele frequency here
	muts = sim.mutations;
	print(sim.mutationFrequencies(p1, muts[muts.id == mutID]));

   sampledIndividuals = sample(p1.individuals, 22);
	sampledIndividuals.genomes.outputVCF("tmp/slim_sw_" + simID + "_11.vcf");
}