// set up a soft sweep simulation
// initialize from a neutral burn-in
initialize()
{
	// define constants if we're in the SLiMgui
	if (exists("slimgui"))
	{
		defineConstant("L", 30000000);
		defineConstant("ne", 50);
		defineConstant("f", 0.1);
		defineConstant("ftol", 0.05);
		defineConstant("n1", 20);
		defineConstant("n2", 20);
		defineConstant("s", 0.5);
		defineConstant("r", 3.11e-8);
		defineConstant("o", "tmp/test");
		defineConstant("i", "tmp/test.vcf");
		defineConstant("g", 11);
	}
	
	// some constants. all should be defined as arguments on the command line
	defineConstant("chrSz", L); // chromosome size in bp
	defineConstant("popSz", ne); // population size
	defineConstant("initFreq", f); // initial frequency of the beneficial mutation
	defineConstant("initFreqtol", ftol); // initial frequency tolerance (initFreq +/- initFreqtol)
	defineConstant("num1", n1); // initial sample size (# diploid individuals)
	defineConstant("num2", n2); // second sample size
	defineConstant("selCoef", asFloat(s)); // selection coefficient, per site
	defineConstant("recomb", r); // recombination rate, Morgan per bp (1e-8 = 1 cM/Mbp)
	defineConstant("outfile", o); // base output file name (_1.vcf and _11.vcf will be added)
	defineConstant("infile", i); // input file name
	defineConstant("gen", g); // number of generations of the soft sweep to run

	defineConstant("simID", getSeed()); // save this run's identifier, used to save files
	
	// prep to output tree format for recapitation
	//initializeTreeSeq();

	// set the overall neutral mutation rate
	initializeMutationRate(0);
	
	// mutations: name, dominance, fixed vs random fitness effects, selection coefficient
	initializeMutationType("m1", 0.5, "f", 0);	// m1 mutation type: neutral, except one will get selected to be beneficial in gen 100
	m1.convertToSubstitution = F; // model all of them so that all are output
	         
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length chrSz
	initializeGenomicElement(g1, 0, chrSz - 1);
	
	// uniform recombination along the chromosome
	initializeRecombinationRate(recomb);
}

// create a population
1 late()
{
	sim.addSubpop("p1", popSz); // create population
	p1.genomes.readFromVCF(infile, m1); // read in sites from msprime burn-in
	sim.rescheduleScriptBlock(s1, start=100+gen, end=100+gen); // determine which generation we'll run the final script block (i.e., how many generations to run the sweep)
}

// slight WF burnin for 100 generations, then sweep from standing variation
100 late()
{
	// pick a mutation to sweep from
	muts = sim.mutations; // all possible mutations
	muts = muts[sim.mutationFrequencies(p1, muts) > (initFreq - initFreqtol) &
		sim.mutationFrequencies(p1, muts) < (initFreq + initFreqtol) &
		muts.position > (chrSz*7/16) & muts.position < (chrSz*9/16)]; // only pick mutations of appropriate frequency near the middle of the chromosome
		
	if (size(muts)) // if some mutations exist
	{
		mut = sample(muts, 1); // pick one from the suitable mutations
		mut.setSelectionCoeff(selCoef); // set selection coefficient
		print("Position: " + mut.position); // print the position in the genome
		defineConstant("mutID", mut.id); // save the mutation ID for the one under selection

		// output initial state (before sweep)
		print("Initial frequency: " + sim.mutationFrequencies(p1, muts[muts.id == mutID])); // print the frequency
	   sampledIndividuals = sample(p1.individuals, num1);
		sampledIndividuals.genomes.outputVCF(outfile + "_1.vcf"); // output to vcf
	}
	else
	{
		cat("No contender of sufficient frequency found.\n");
	}

}

// note that this script block gets rescheduled in generation 1
s1 111 late() {
	if (exists("mutID"))
	{
		//check the selected allele frequency here
		muts = sim.mutations;
		print("Final frequency: " + sim.mutationFrequencies(p1, muts[muts.id == mutID]));

		// output the final vcf file
		sampledIndividuals = sample(p1.individuals, num2);
		sampledIndividuals.genomes.outputVCF(outfile + "_11.vcf");
	}
}