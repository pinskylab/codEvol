// set up a soft sweep simulation
// recapitate later and add neutral mutations
initialize()
{
	// some constants
	defineConstant("chrSz", 30000000); // chromosome size in bp
	defineConstant("simID", getSeed()); // save this run's identifier, used to save
	defineConstant("popSz", 5000); // population size
	defineConstant("initFreq", 0.1); // initial frequency of the beneficial mutation

	// prep to output tree format for recapitation
	initializeTreeSeq();

	// set the overall neutral mutation rate
	initializeMutationRate(0);
	
	// mutations
	initializeMutationType("m2", 0.5, "f", 0.5);	// m2 mutation type: selected
	         
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m2, 1.0);
	
	// uniform chromosome of length 30 mb
	initializeGenomicElement(g1, 0, chrSz - 1);
	
	// uniform recombination along the chromosome
	initializeRecombinationRate(1e-8);
}

// create a population
1
{
	sim.addSubpop("p1", popSz);
}

// slight WF burnin for 100 generations, then sweep from standing variation
// do this by introducing a beneficial mutation to some individuals
100 late()
{
	//add beneficial mutation
	sample(p1.genomes, asInteger(round(popSz * initFreq))).addNewDrawnMutation(m2, asInteger(round(chrSz/2)));
	
	//would be good to double check the allele frequency here
	
	// output state now
	sim.treeSeqOutput("tmp/slim_sw_" + simID + "_1.trees"); // to output trees
}


110 late() {
	//would be good to double check the allele frequency here

   //sampledIndividuals = sample(p1.individuals, 22);
	//sampledIndividuals.genomes.outputVCF();
	sim.treeSeqOutput("tmp/slim_sw_" + simID + "_11.trees"); // to output trees
}